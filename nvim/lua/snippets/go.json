{
  "Cloudflare Tls Config": {
    "prefix": "tlscnfg",
    "body": [
      "// tlsConfig from https://blog.cloudflare.com/exposing-go-on-the-internet/",
      "tlsConfig := &tls.Config{",
      "\t// Causes servers to use Go's default ciphersuite preferences,",
      "\t// which are tuned to avoid attacks. Does nothing on clients.",
      "\tPreferServerCipherSuites: true,",
      "\t// Only use curves which have assembly implementations",
      "\tCurvePreferences: []tls.CurveID{",
      "\t\ttls.CurveP256,",
      "\t\ttls.X25519, // Go 1.8 only",
      "\t},",
      "\tMinVersion: tls.VersionTLS12,",
      "\tCipherSuites: []uint16{",
      "\t\ttls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,",
      "\t\ttls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,",
      "\t\ttls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305, // Go 1.8 only",
      "\t\ttls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,   // Go 1.8 only",
      "\t\ttls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,",
      "\t\ttls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,",
      "",
      "\t\t// Best disabled, as they don't provide Forward Secrecy,",
      "\t\t// but might be necessary for some clients",
      "\t\t// tls.TLS_RSA_WITH_AES_256_GCM_SHA384,",
      "\t\t// tls.TLS_RSA_WITH_AES_128_GCM_SHA256,",
      "\t},",
      "}"
    ],
    "description": "Recommended Tls Configuration from https://blog.cloudflare.com/exposing-go-on-the-internet/"
  },
  "http.Server Options": {
    "prefix": "srvopt",
    "body": [
      "srv := &http.Server{",
      "\tAddr:\t\t $1,",
      "\tReadTimeout:  5 * time.Second,",
      "\tWriteTimeout: 10 * time.Second,",
      "\tIdleTimeout:  60 * time.Second,",
      "\tTLSConfig:\ttlsConfig,",
      "\tHandler:\t  mux,",
      "}"
    ],
    "description": "Simple http.Server option variable"
  },
  "Implement method": {
    "prefix": "m",
    "body": ["// $3 ${4:implementation}.", "func ($1 *$2) $3($5) $6 {", "\t$0", "}"]
  },
  "If err != nil ": {
    "prefix": "ie",
    "body": ["if err != nil {", "\t$0", "}"]
  },
  "If err := x; err != nil": {
    "prefix": "ie:",
    "body": ["if err := $1; err != nil {", "\t$0", "}"]
  },
  "Bytes": {
    "prefix": "b",
    "body": ["[]byte($1)"]
  },
  "Function": {
    "prefix": "f",
    "body": ["// $1 $2.", "func $1($3) $4 {", " \t$0", "}"]
  },
  "New Constructor": {
    "prefix": "newcrt",
    "body": ["// New $2.", "func New($3) *$1 {", "\treturn &$1{", "\t\t$0", "\t}", "}"]
  },
  "Config": {
    "prefix": "config",
    "body": [
      "// Config options.",
      "type Config struct {",
      "\t$0",
      "}",
      "",
      "// $1 $2",
      "type $1 struct {",
      "\tConfig",
      "}",
      "",
      "// New $3 with the given config.",
      "func New(c Config) *$1 {",
      "\treturn &$1{",
      "\t\tConfig: c,",
      "\t}",
      "}"
    ]
  },
  "Test Function": {
    "prefix": "t",
    "body": ["// Test $2.", "func Test$1(t *testing.T) {", "\t$0", "}"]
  },
  "Test Case": {
    "prefix": "tr",
    "body": ["t.Run(\"$1\", func(t *testing.T){", "\t$0", "})"]
  },
  "require.NoError": {
    "prefix": "rner",
    "body": ["require.NoError(t, err)"]
  },
  "require.NotEmpty": {
    "prefix": "rnem",
    "body": ["require.NotEmpty(t, $0)"]
  }
}
